/// Set the columns width for the provided property based on the column count
/// and the current column position
///
/// @access public
///
/// @param {String} $property - CSS property to apply the width
/// @param {Number} $columns - Column count
/// @param {Number} $position - Current column position
///
/// @example scss - Usage
///   .foo {
///     @include columns-width('max-width', 12, 4);
///   }
///
/// @example css - CSS output
///   .foo {
///     max-width: 33.33333%;
///   }
@mixin columns-width($property, $columns, $position) {
  #{$property}: get-width($columns, $position, get-multiplier-unit($position));
}

/// Set the offsets width for the provided property based on the column count
/// and the current column position
///
/// @access public
///
/// @param {String} $property - CSS property to apply the width
/// @param {Number} $columns - Column count
/// @param {Number} $position - Current column position
///
/// @example scss - Usage
///   .foo {
///     @include offsets-width('margin-left', 12, 4);
///   }
///
/// @example css - CSS output
///   .foo {
///     margin-left: 33.33333%;
///   }
@mixin offsets-width($property, $columns, $position) {
  #{$property}: get-width($columns, 1, get-multiplier-unit($position)) * $position;
}

/// Generate the CSS code for each media query specified in the $queries
/// variable. This mixin uses the $default-viewport variable to decide which
/// breakpoint must be outside of the @media rule.
///
/// @access private
///
/// @param {String} $breakpoint - Name of the media query breakpoint
/// @param {Map} $queries - List of media query breakpoints
@mixin queries($breakpoint, $queries) {
  $query: map-get($queries, $breakpoint);

  @if ($query == $default-viewport) {
    @content;
  } @else {
    @media screen and (min-width: $query) {
      @content;
    }
  }
}

/// Generate the columns CSS code for the grid using the queries mixin to
/// create the media queries and the project variables
///
/// @access private
///
/// @param {String} $block [$block-delimiter]
/// @param {List} $bps [$breakpoints]
/// @param {Number} $columns [$column-count]
/// @param {String} $modifier [$modifier-delimiter]
/// @param {List} $properties [$column-properties]
/// @param {String} $selector [$column-selector]
/// @param {Map} $queries [$queries]
@mixin columns(
  $block: $block-delimiter,
  $bps: $breakpoints,
  $columns: $column-count,
  $modifier: $modifier-delimiter,
  $properties: $column-properties,
  $selector: $column-selector,
  $queries: $queries
) {
  @each $bp in $bps {
    @include queries($bp, $queries) {
      @for $i from 0 through $columns {
        @if ($i == 0) {
          #{$selector}#{$block}#{$bp} {
            flex-basis: 0;
            flex-grow: 1;
            max-width: 100%;

            @content;
          }
        } @else {
          #{$selector}#{$block}#{$bp}#{$modifier}#{$i} {
            @content;

            @each $prop in $properties {
              @include columns-width($prop, $columns, $i);
            }
          }
        }
      }
    }
  }
}

/// Generate the offsets CSS code for the grid using the queries mixin to
/// create the media queries and the project variables
///
/// @access private
///
/// @param {String} $block [$block-delimiter]
/// @param {List} $bps [$breakpoints]
/// @param {Number} $columns [$column-count]
/// @param {String} $modifier [$modifier-delimiter]
/// @param {String} $offset [$offset-modifier]
/// @param {List} $properties [$column-properties]
/// @param {String} $selector [$column-selector]
/// @param {Map} $queries [$queries]
@mixin offsets(
  $block: $block-delimiter,
  $bps: $breakpoints,
  $columns: $column-count,
  $modifier: $modifier-delimiter,
  $offset: $offset-modifier,
  $properties: $offset-properties,
  $selector: $column-selector,
  $queries: $queries
) {
  @each $bp in $bps {
    @for $i from 0 through $columns - 1 {
      #{$selector}#{$block}#{$bp}#{$modifier}#{$offset}#{$modifier}#{$i} {
        @include queries($bp, $queries) {
          @content;

          @each $prop in $properties {
            @include offsets-width($prop, $columns, $i);
          }
        }
      }
    }
  }
}

/// Generate default CSS declarations for every breakpoint available in the queries map
/// including both columns and offsets
///
/// @access private
///
/// @param {String} $block [$block-delimiter]
/// @param {List} $bps [$breakpoints]
/// @param {Number} $columns [$column-count]
/// @param {String} $element [$element-delimiter]
/// @param {String} $modifier [$modifier-delimiter]
/// @param {String} $offset [$offset-modifier]
/// @param {String} $selector [$column-selector]
@mixin defaults(
  $block: $block-delimiter,
  $bps: $breakpoints,
  $columns: $column-count,
  $element: $element-delimiter,
  $modifier: $modifier-delimiter,
  $offset: $offset-modifier,
  $selector: $column-selector
) {
  @each $bp in $bps {
    @include queries($bp, $queries) {
      @for $i from 0 through 12 {
        @if $i == 0 {
          #{$selector}#{$block}#{$bp} {
            @content;
          }
        } @else if $i == 12 {
          #{$selector}#{$block}#{$bp}#{$element}#{$i} {
            @content;
          }
        } @else if $i != 0 {
          #{$selector}#{$block}#{$bp}#{$element}#{$i},
          #{$selector}#{$block}#{$bp}#{$modifier}#{$offset}#{$modifier}#{$i} {
            @content;
          }
        }
      }
    }
  }
}

/// Generate the CSS code for the grid helpers including the code in the media
/// queries using the project breakpoints
///
/// @access public
///
/// @param {String} $selector - Helper classname selector
/// @param {List} $bps [$breakpoints]
/// @param {String} $modifier [$modifier-delimiter]
///
/// @example scss - Usage
///   @include helper('foo');
///
/// @example css - CSS output
///   .foo-xs {
///     property: value;
///   }
///   @media screen and (min-width: 48em) {
///     .foo-sm {
///       property: value;
///     }
///   }
@mixin helper(
  $selector,
  $bps: $breakpoints,
  $modifier: $modifier-delimiter
) {
  @each $bp in $bps {
    #{$selector}#{$modifier-delimiter}#{$bp} {
      @include queries($bp, $queries) {
        @content;
      }
    }
  }
}
